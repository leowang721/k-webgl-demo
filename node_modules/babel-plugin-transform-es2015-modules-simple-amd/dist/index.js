"use strict";

require("better-log/install");

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildModule = (0, _babelTemplate2.default)("\ndefine([IMPORT_PATHS], function(IMPORT_VARS) {\n\tBODY;\n});\n");

module.exports = function (_ref) {
	var t = _ref.types;

	return {
		visitor: {
			Program: {
				exit: function exit(path, file) {
					var body = path.get("body"),
					    sources = [],
					    anonymousSources = [],
					    vars = [],
					    isModular = false,
					    middleDefaultExportID = false;

					for (var i = 0; i < body.length; i++) {
						var _path = body[i],
						    isLast = i == body.length - 1;

						if (_path.isExportDefaultDeclaration()) {
							var declaration = _path.get("declaration");

							if (isLast) {
								_path.replaceWith(t.returnStatement(declaration.node));
							} else {
								middleDefaultExportID = _path.scope.generateUidIdentifier("export_default");
								_path.replaceWith(t.variableDeclaration('var', [t.variableDeclarator(middleDefaultExportID, declaration.node)]));
							}

							isModular = true;
						}

						if (_path.isImportDeclaration()) {
							var specifiers = _path.node.specifiers;

							if (specifiers.length == 0) {
								anonymousSources.push(_path.node.source);
							} else if (specifiers.length == 1) {
								sources.push(_path.node.source);
								vars.push(specifiers[0]);
							} else {
								throw Error("Not allowed to use " + specifiers.length + " specifiers");
							}

							_path.remove();

							isModular = true;
						}

						if (isLast && middleDefaultExportID) {
							_path.insertAfter(t.returnStatement(middleDefaultExportID));
						}
					}

					if (isModular) {
						path.node.body = [buildModule({
							IMPORT_PATHS: sources.concat(anonymousSources),
							IMPORT_VARS: vars,
							BODY: path.node.body
						})];
					}
				}
			}
		}
	};
};
